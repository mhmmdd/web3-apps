// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract Storage {
    // slot 0
    uint8 public a = 7; // 1 byte
    uint16 public b = 8; // 2 bytes
    address public c = 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4; // 20 bytes
    bool public d = true; // 1 byte
    uint64 public e = 10; // 8 bytes

    // slot is 32 bytes
    uint256 public f = 12; // 32 bytes -> slot 1
    uint256 public g = 13; // 32 bytes -> slot 2

    uint8 public h = 14; // 1 byte -> slot 3
    uint8 public i = 15; // 1 byte -> slot 3


    // keccak256(key + slot)
    mapping(uint => uint) public j; // 32 bytes -> slot 4
    mapping(address => uint) public k; // 32 bytes -> slot 5

    // array
    // keccak256(slot) + index
    uint[] public l; // 32 bytes -> slot 6

    constructor() {
        // 32 bytes for key 2 + 32 bytes for slot 4 ->
        // 0x0000000000000000000000000000000000000000000000000000000000000002 + 0000000000000000000000000000000000000000000000000000000000000004
        // keccak256(00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004)
        // = 91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7
        j[2] = 4;

        // 32 bytes for key 3 + 32 bytes for slot 4 ->
        // 0x0000000000000000000000000000000000000000000000000000000000000003 + 0000000000000000000000000000000000000000000000000000000000000004
        // keccak256(00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000004)
        // to see the keccak hash, go to https://emn178.github.io/online-tools/keccak_256.html
        // = 2e174c10e159ea99b867ce3205125c24a42d128804e4070ed6fcc8cc98166aa0
        j[3] = 10;

        // 32 bytes for key 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4 + 32 bytes for slot 5 ->
        // 0x00000000000000000000000005B38Da6a701c568545dCfcB03FcB875f56beddC + 0000000000000000000000000000000000000000000000000000000000000005
        // keccak256(0000000000000000000000005B38Da6a701c568545dCfcB03FcB875f56beddC40000000000000000000000000000000000000000000000000000000000000005)
        // = a8c8bc7c03ef03b3fe2f845d765c43dc1973518e7febf315273fadcae0a2af1a
        k[0x5B38Da6a701c568545dCfcB03FcB875f56beddC4] = 100;



        // Array
        // 32 bytes for slot 6 + 0 bytes for index 0
        // keccak256(0000000000000000000000000000000000000000000000000000000000000006) + 0
        // = f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f
        l.push(1);

        // keccak256(0000000000000000000000000000000000000000000000000000000000000006) + 1
        // hexadecimal -> f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f
        // decimal -> 111414077815863400510004064629973595961579173665589224203503662149373724986687
        // decimal + 1 -> 111414077815863400510004064629973595961579173665589224203503662149373724986688
        // hexadecimal -> f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d40
        l.push(10);

        // keccak256(0000000000000000000000000000000000000000000000000000000000000006) + 2
        // hexadecimal -> f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f
        // decimal -> 111414077815863400510004064629973595961579173665589224203503662149373724986687
        // decimal + 2 -> 111414077815863400510004064629973595961579173665589224203503662149373724986689
        // hexadecimal -> f652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d41
        l.push(100);
    }
}
